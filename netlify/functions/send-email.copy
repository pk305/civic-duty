const Mailgun = require("mailgun.js");
const formData = require("form-data");

const recipients = {
  clerk: {
    name: "Clerk of the National Assembly",
    email: "clerk@parliament.go.ke,cna@parliament.go.ke",
  },
  finance: {
    name: "Finance Committee (Departmental Committee on Finance and National Planning)",
    email: "cna@parliament.go.ke",
  },
  speaker: {
    name: "Speaker of the National Assembly",
    email: "nationalassembly@parliament.go.ke",
  },
  treasury: {
    name: "Cabinet Secretary for the National Treasury",
    email: "cabinetsecretary@treasury.go.ke,pstnt@treasury.go.ke",
  },
  president: {
    name: "Office of the President",
    email: "info@statehouse.go.ke",
  },
  judiciary: {
    name: "Chief Justice of Kenya",
    email: "chiefjustice@court.go.ke,registrarsupremecourt@court.go.ke",
  },
};

exports.handler = async (event, context) => {
  // Handle CORS
  const headers = {
    "Access-Control-Allow-Origin":
      "https://reject-finance-bill-2025.netlify.app",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
  };

  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers,
      body: "",
    };
  }

  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: "Method not allowed" }),
    };
  }

  try {
    const { selectedRecipients, subject, content, senderName, senderEmail } =
      JSON.parse(event.body);

    if (!selectedRecipients || selectedRecipients.length === 0) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          message: "Please select at least one recipient",
        }),
      };
    }

    if (!senderName || !senderEmail) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          message: "Please provide your name and email address",
        }),
      };
    }

    if (!subject || !content) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          message: "Subject and content are required",
        }),
      };
    }

    // Initialize Mailgun
    const mailgun = new Mailgun(formData);
    const mg = mailgun.client({
      username: "api",
      key: process.env.MAILGUN_API_KEY,
      url: process.env.MAILGUN_URL || "https://api.mailgun.net",
    });

    // Collect all recipient emails
    const recipientEmails = [];
    const recipientNames = [];

    selectedRecipients.forEach((recipientKey) => {
      if (recipients[recipientKey]) {
        const emails = recipients[recipientKey].email
          .split(",")
          .map((email) => email.trim());
        recipientEmails.push(...emails);
        recipientNames.push(recipients[recipientKey].name);
      }
    });

    // Remove duplicates
    const uniqueEmails = [...new Set(recipientEmails)];

    // Prepare email content
    const emailContent = content.replace(/{{Name}}/g, senderName);
    const htmlContent = emailContent.replace(/\n/g, "<br>");

    // Send email using Mailgun
    const emailData = {
      from: `${senderName} <${process.env.MAILGUN_FROM_EMAIL}>`,
      to: uniqueEmails,
      subject: subject,
      text: emailContent,
      html: `
        <div style="font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
            <h2>OBJECTION TO THE FINANCE BILL 2025</h2>
            <p style="margin: 0; opacity: 0.9;">National Assembly Bills No. 19 of 2025</p>
          </div>
          <div style="padding: 30px; background: white;">
            ${htmlContent}
          </div>
          <div style="background: #f8f9fa; padding: 20px; border-top: 1px solid #e1e5e9; text-align: center; font-size: 12px; color: #666;">
            <p>This email was sent via the Government Petition Email Composer</p>
            <p>Sender: ${senderName} &lt;${senderEmail}&gt;</p>
            <p>Sent from: https://reject-finance-bill-2025.netlify.app</p>
          </div>
        </div>
      `,
      "h:Reply-To": senderEmail,
      "h:X-Mailgun-Variables": JSON.stringify({
        sender_name: senderName,
        sender_email: senderEmail,
        petition_type: "finance_bill_2025",
        source: "netlify_app",
      }),
    };

    console.log("Sending email to:", uniqueEmails);
    console.log("From:", emailData.from);

    const result = await mg.messages.create(
      process.env.MAILGUN_DOMAIN,
      emailData
    );

    console.log("Email sent successfully:", result);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        message: `Email sent successfully to ${uniqueEmails.length} recipient(s)`,
        recipients: recipientNames,
        messageId: result.id,
      }),
    };
  } catch (error) {
    console.error("Error sending email:", error);

    // Handle specific Mailgun errors
    let errorMessage = "Failed to send email. Please try again.";
    let statusCode = 500;

    if (error.status === 401) {
      errorMessage =
        "Authentication failed. Please check Mailgun configuration.";
      statusCode = 401;
    } else if (error.status === 402) {
      errorMessage = "Payment required. Please check your Mailgun account.";
      statusCode = 402;
    } else if (error.status === 400) {
      errorMessage = "Invalid email data. Please check your input.";
      statusCode = 400;
    }

    return {
      statusCode,
      headers,
      body: JSON.stringify({
        success: false,
        message: errorMessage,
        error:
          process.env.NODE_ENV === "development" ? error.message : undefined,
      }),
    };
  }
};
